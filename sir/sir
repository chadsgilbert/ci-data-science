#!/usr/bin/env python

"""
The Susceptible - Infectious - Recovered (SIR) model.

See index.html#sir
"""

from sys import argv, stderr
import numpy
import matplotlib.pyplot as plt
import h5py


def simulate(output_filename):
    """
    Run a SIR simulation.
    """
    S = 99.0
    I = 1.0
    R = 0.0
    N = S + I + R
    B = 0.04
    g = 0.01
    dt = 1.0

    tt = []
    ss = []
    ii = []
    rr = []

    it = 0
    T = 0
    for it in range(0, 600):
        # Compute the rates.
        dS = -B * I * S / N
        dI = B * I * S / N - g * I
        dR = g * I

        # Compute the values at the next time.
        T += dt
        S += dt * dS
        I += dt * dI
        R += dt * dR

        # Store the values for analysis.
        tt.append(T)
        ss.append(S)
        ii.append(I)
        rr.append(R)

    with h5py.File(output_filename, 'w') as output_file:
        data = output_file.create_group(u"data")
        data.create_dataset(u"time", data=numpy.array(tt))
        data.create_dataset(u'susceptible', data=numpy.array(ss))
        data.create_dataset(u'infected', data=numpy.array(ii))
        data.create_dataset(u'recovered', data=numpy.array(rr))
        output_file.flush()


def plot(output_filename):
    """
    Plot the time-series in output_filename.
    """
    output_file = h5py.File(output_filename, 'r')

    data = output_file.get('data')
    time = data.get('time')[...]
    susceptible = data.get('susceptible')
    infected = data.get('infected')
    recovered = data.get('recovered')

    fig = plt.figure()
    fig.set_size_inches(10, 5)
    plt.plot(time, susceptible[...])
    plt.plot(time, infected[...])
    plt.plot(time, recovered[...])
    plt.legend(['Susceptible', 'Infected', 'Recovered'])
    plt.ylabel('Percent of Population [%]')
    plt.xlabel('Time [days]')
    plt.savefig("site/sir.png")


def _print_error():
    print(stderr, "Usage:")
    print(stderr, "sir simulate filename")
    print(stderr, "sir plot filename")


if __name__ == "__main__":
    if len(argv) != 3:
        _print_error()
        exit(1)

    if argv[1] == "simulate":
        simulate(argv[2])
    elif argv[1] == "plot":
        plot(argv[2])
    else:
        _print_error()
        exit(2)
