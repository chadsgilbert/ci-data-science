#!/usr/bin/env python

"""
The Susceptible - Infectious - Recovered (SIR) model.

See index.html#sir
"""

from sys import argv
import argparse
import numpy
import matplotlib.pyplot as plt
import h5py


def _batch(output_file, beta_list, gamma_list):
    """
    Run batch simulations for all combinations of beta_list and gamma_list.
    """
    for beta in beta_list:
        for gamma in gamma_list:
            beta_int = int(round(beta * 100))
            gamma_int = int(round(gamma * 100))
            data = output_file.create_group(f"b{beta_int}_g{gamma_int}")
            data.attrs[u"beta"] = beta
            data.attrs[u"gamma"] = gamma
            _simulate(data, beta=beta, gamma=gamma)


def batch():
    """
    Batch sub-command.
    """
    parser = argparse.ArgumentParser(description="Run the batch simulations")
    parser.add_argument('filename')
    default = numpy.arange(0.1, 1.0, 0.1)
    parser.add_argument('--beta', default=default, type=list)
    parser.add_argument('--gamma', default=default, type=list)
    args = parser.parse_args(argv[2:])
    with h5py.File(args.filename, 'w') as output_file:
        _batch(output_file, args.beta, args.gamma)


def _simulate(data, beta, gamma):
    """
    Run a SIR simulation, storing the time-series data in data.
    """
    susceptible = 0.99
    infected = 0.01
    recovered = 0.0

    duration = 365
    current_time = 0
    time_step = 1.0

    time = data.create_dataset(u"time", (duration + 1,))
    time.attrs[u"units"] = u'days'
    susc = data.create_dataset(u'susceptible', (duration + 1,))
    susc.attrs[u"units"] = u'percent'
    ifcd = data.create_dataset(u'infected', (duration + 1,))
    ifcd.attrs[u"units"] = u'percent'
    rcvd = data.create_dataset(u'recovered', (duration + 1,))
    rcvd.attrs[u"units"] = u'percent'

    time[0] = current_time
    susc[0] = susceptible
    ifcd[0] = infected
    rcvd[0] = recovered

    for iterator in range(0, duration):
        # Compute the rates.
        delta_susceptible = -beta * infected * susceptible
        delta_infected = beta * infected * susceptible - gamma * infected
        delta_recovered = gamma * infected

        # Compute the values at the next time.
        current_time += time_step
        susceptible += time_step * delta_susceptible
        infected += time_step * delta_infected
        recovered += time_step * delta_recovered

        # Store the values for analysis.
        data['time'][iterator + 1] = current_time
        susc[iterator + 1] = susceptible
        ifcd[iterator + 1] = infected
        rcvd[iterator + 1] = recovered


def simulate():
    """
    Simulate sub-command.
    """
    parser = argparse.ArgumentParser(description="Run the simulation")
    parser.add_argument('filename')
    parser.add_argument('--beta', default=0.04, type=float)
    parser.add_argument('--gamma', default=0.01, type=float)
    args = parser.parse_args(argv[2:])
    with h5py.File(args.filename, 'w') as output_file:
        data = output_file.create_group(u"data")
        _simulate(data, args.beta, args.gamma)
        output_file.flush()


def main():
    """
    Parse the input command to determine which ont to run.
    """
    parser = argparse.ArgumentParser(description="Simulate the S-I-R model.",
                                     usage='''sir <command> [args]

The commands are:
  simulate  Run a simulation
  batch     Run a batch of simulations''')
    parser.add_argument('command', help="The command to run")
    args = parser.parse_args(argv[1:2])
    globals()[args.command]()


if __name__ == "__main__":
    main()
