#!/usr/bin/env python

"""
The Susceptible - Infectious - Recovered (SIR) model.

See index.html#sir
"""

from sys import argv
import argparse
import numpy
import matplotlib.pyplot as plt
import h5py


def _simulate(output_filename, **kwargs):
    """
    Run a SIR simulation.
    """
    S = 99.0
    I = 1.0
    R = 0.0
    N = S + I + R
    B = kwargs.get('beta', 0.04)
    g = kwargs.get('gamma', 0.01)
    dt = 1.0

    tt = []
    ss = []
    ii = []
    rr = []

    it = 0
    T = 0
    for it in range(0, 600):
        # Compute the rates.
        dS = -B * I * S / N
        dI = B * I * S / N - g * I
        dR = g * I

        # Compute the values at the next time.
        T += dt
        S += dt * dS
        I += dt * dI
        R += dt * dR

        # Store the values for analysis.
        tt.append(T)
        ss.append(S)
        ii.append(I)
        rr.append(R)

    with h5py.File(output_filename, 'w') as output_file:
        data = output_file.create_group(u"data")
        data.create_dataset(u"time", data=numpy.array(tt))
        data.create_dataset(u'susceptible', data=numpy.array(ss))
        data.create_dataset(u'infected', data=numpy.array(ii))
        data.create_dataset(u'recovered', data=numpy.array(rr))
        output_file.flush()


def simulate():
    """
    Simulate sub-command.
    """
    parser = argparse.ArgumentParser(description="Run the simulation")
    parser.add_argument('filename')
    parser.add_argument('--beta', default=0.04, type=float)
    parser.add_argument('--gamma', default=0.01, type=float)
    args = parser.parse_args(argv[2:])
    print(args)
    _simulate(args.filename, beta=args.beta, gamma=args.gamma)


def _plot(input_filename, output_filename):
    """
    Plot the time-series in output_filename.
    """
    output_file = h5py.File(input_filename, 'r')

    data = output_file.get('data')
    time = data.get('time')[...]
    susceptible = data.get('susceptible')
    infected = data.get('infected')
    recovered = data.get('recovered')

    fig = plt.figure()
    fig.set_size_inches(10, 5)
    plt.plot(time, susceptible[...])
    plt.plot(time, infected[...])
    plt.plot(time, recovered[...])
    plt.legend(['Susceptible', 'Infected', 'Recovered'])
    plt.ylabel('Percent of Population [%]')
    plt.xlabel('Time [days]')
    plt.savefig(output_filename)


def plot():
    """
    Run the plot subcommand.
    """
    plot_parser = argparse.ArgumentParser(description="Plot")
    plot_parser.add_argument('input')
    plot_parser.add_argument('output')
    plot_args = plot_parser.parse_args(argv[2:])
    _plot(plot_args.input, plot_args.output)


def main():
    """
    Parse the input command to determine which ont to run.
    """
    parser = argparse.ArgumentParser(description="Simulate the S-I-R model.",
                                     usage='''sir <command> [args]

The commands are:
  simulate  Run a simulation
  plot      Plot simulation results''')
    parser.add_argument('command', help="The command to run")
    args = parser.parse_args(argv[1:2])
    globals()[args.command]()


if __name__ == "__main__":
    main()
